CREATE DATABASE PROJECT30;

USE PROJECT30;


CREATE TABLE USER_TABLE(
USERS_ID INT IDENTITY(5555,1) PRIMARY KEY  , 
USER_FULLNAME VARCHAR(255) ,
USER_EMAIL VARCHAR(255) , 
USER_PHONE BIGINT , 
USER_ADDRESS VARCHAR(255) , 
USER_CITY VARCHAR(255),
USER_STATE VARCHAR(255),
USER_POSTAL_CODE BIGINT ,
USER_REGISTRATION_DATE DATE , 

)

INSERT INTO USER_TABLE(USER_FULLNAME,USER_EMAIL,USER_PHONE,USER_ADDRESS,USER_CITY,USER_STATE,USER_POSTAL_CODE,USER_REGISTRATION_DATE)
VALUES('John Doe', 'john.doe@example.com', 1234567890, '123 Main St', 'City A', 'State X', 12345, '2023-08-30')


  /* {

  "order_id": 12345,"customer_id": 67890,"order_date": "2023-08-30","shipping_address": "123 Main St, City",
  "total_amount": 150.75,"tax_amount": 15.08,"discount_amount": 10.00,"payment_status": "Paid",
  "shipping_status": "Shipped", "payment_method": "Credit Card"
}

*/
CREATE TABLE ORDERS(
ORDERS_ID INT IDENTITY(5555,1) PRIMARY KEY,
USERS_ID INT,
BOOK_ID INT,
ORDERS_DATE DATE , 
ORDERS_SHIPPING_ADDRESS VARCHAR(255),
ORDERS_TOTAL_AMOUNT MONEY , 
ORDERS_TAX_AMOUNT MONEY,
ORDERS_DISCOUNT_AMOUNT MONEY , 
ORDERS_PAYMENT_STATUS VARCHAR(255),
ORDERS_SHIPPING_STATUS VARCHAR(255),
ORDERS_PAYMENT_METHORD VARCHAR(255)
FOREIGN KEY (USERS_ID ) REFERENCES USER_TABLE(USERS_ID ),
FOREIGN KEY (BOOK_ID) REFERENCES BOOK(BOOK_ID)
);


INSERT INTO ORDERS(USERS_ID ,ORDERS_DATE,ORDERS_SHIPPING_ADDRESS,ORDERS_TOTAL_AMOUNT,ORDERS_TAX_AMOUNT,ORDERS_DISCOUNT_AMOUNT,ORDERS_PAYMENT_STATUS,ORDERS_PAYMENT_METHORD)
VALUES(67890,'2023-08-30','123 MAIN ST, CITY', 150.75 ,15.08, 10.75 , 'PAID' , 'GPAY' )

SELECT * FROM ORDERS;

-- TABLE PAYMENT 


CREATE TABLE PAYMENT(
PAYMENT_ID INT IDENTITY(5555,1) PRIMARY KEY  , 
ORDER_ID INT NOT NULL , 
CUSTOMER_ID INT NOT NULL, 
PAYMENT_DATE DATE NOT NULL,
PAYMENT_AMOUNT MONEY NOT NULL , 
PAYMENT_METHORD VARCHAR(255) NOT NULL  , 
PAYMENT_CARD_NUMBER BIGINT UNIQUE NOT NULL , 
PAYMENT_EXPIRATION_DATE DATE NOT NULL  , 
PAYMENT_CVV INT NOT NULL , 
PAYMENT_STATUS VARCHAR(255) NOT NULL 
FOREIGN KEY (ORDER_ID) REFERENCES USER_TABLE(USERS_ID),
FOREIGN KEY (CUSTOMER_ID)  REFERENCES ORDERS(ORDERS_ID)


)
-- Insert example data into the PAYMENT table
INSERT INTO PAYMENT (ORDER_ID, CUSTOMER_ID, PAYMENT_DATE, PAYMENT_AMOUNT, PAYMENT_METHORD, PAYMENT_CARD_NUMBER, PAYMENT_EXPIRATION_DATE, PAYMENT_CVV, PAYMENT_STATUS)
VALUES(101, 201, '2023-08-30', 100.00, 'Credit Card', 1234567890123456, '2025-12-31', 123, 'Completed')



CREATE TABLE BOOK(
BOOK_ID INT IDENTITY(1111,1) PRIMARY KEY,
BOOK_TITLE VARCHAR(255) NOT NULL,
BOOK_AUTHOR VARCHAR(255) NOT NULL,
BOOK_CATEGORY VARCHAR(255) NOT NULL,
BOOK_PUBLISH_YEAR DATETIME NOT NULL,
BOOK_ISBN BIGINT NOT NULL,
BOOK_PRICE MONEY NOT NULL,
BOOK_PUBLISHER VARCHAR(255) NOT NULL,
BOOK_LANGUAGE VARCHAR(255) NOT NULL,
BOOK_PAGECOUNT INT NOT NULL,
BOOK_SHORT_DESC VARCHAR(255) NOT NULL,
BOOK_LONG_DESC VARCHAR(1000) NOT NULL,
BOOK_LONG_THUMBNAIL_URL VARCHAR(1000) NOT NULL,
BOOK_PUBLISH_STATUS VARCHAR(55) NOT NULL , 
BOOK_QUANTITY_AVAILABLE INT 
);


INSERT INTO BOOK 
VALUES (
'Unlocking Android',
'W. Frank Ableson',
'Open Source',
'2009-04-01 00:00:00',
1933988673,
299,
'RACHNA SAGAR',
'ENGLISH',
586,
'Unlocking Android: A Developers Guide provides concise, hands-on instruction for the Android operating system and development tools. This book teaches important architectural concepts',
'Android is an open source mobile phone platform based on the Linux operating system and developed by the Open Handset Alliance, a consortium of over 30 hardware, software and telecom companies that focus on open ',
'https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ableson.jpg',
'PUBLISH'
);

--

/*

select * from prod;
create procedure spname5 as
select * from prod;
exec spname5;

*/



CREATE PROCEDURE GET_BOOKNAME AS 

SELECT * FROM BOOK; 
EXEC GET_BOOKNAME;

--Should have option to create customer

CREATE PROCEDURE GET_CUSTOMER AS

INSERT INTO USER_TABLE VALUES('AMAN GUPTA', 'AMAN.GUPTA@example.com', 12345967890, '123 Main St', 'City A', 'State X', 12545, '2023-09-30')
SELECT * FROM USER_TABLE
EXEC GET_CUSTOMER

-- Allow customers to search for books by title, author, or category.


-- SEARCH_TITLE 
CREATE PROCEDURE SEARCH_TITLE AS 
SELECT * FROM BOOK WHERE BOOK_TITLE LIKE '%A%'
EXEC SEARCH_TITLE


-- SEARCH_AUTHOR 
CREATE PROCEDURE SEARCH_AUTHOR AS 
SELECT * FROM BOOK WHERE BOOK_AUTHOR LIKE '%A%'
EXEC SEARCH_AUTHOR


-- SEARCH CATEGORY  
CREATE PROCEDURE SEARCH_CATEGORY AS 
SELECT * FROM BOOK WHERE BOOK_CATEGORY LIKE '%A%'
EXEC SEARCH_CATEGORY



-- Enable customers to place orders, view order history, and make payments.




(USER_FULLNAME,USER_EMAIL,USER_PHONE,USER_ADDRESS,USER_CITY,USER_STATE,USER_POSTAL_CODE,USER_REGISTRATION_DATE)


-- Create a SQL function to insert a new customer


-- Implement inventory management to track book quantities.
-- Example SQL query to update book quantity after an order
/*
UPDATE book

SET BOOK_QUANTITY_AVAILABLE = quantity_available - quantity_ordered

WHERE BOOK_ID = BOOK_ID;
*/





