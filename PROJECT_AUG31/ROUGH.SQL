

create database aug31;

use aug31;


CREATE TABLE USER_TABLE(
USERS_ID INT IDENTITY(5555,1) PRIMARY KEY  , 
USER_FULLNAME VARCHAR(255) ,
USER_EMAIL VARCHAR(255) , 
USER_PHONE BIGINT , 
USER_ADDRESS VARCHAR(255) , 
USER_CITY VARCHAR(255),
USER_STATE VARCHAR(255),
USER_POSTAL_CODE BIGINT ,
USER_REGISTRATION_DATE DATE 
);




INSERT INTO USER_TABLE(USER_FULLNAME,USER_EMAIL,USER_PHONE,USER_ADDRESS,USER_CITY,USER_STATE,USER_POSTAL_CODE,USER_REGISTRATION_DATE)
VALUES('John Doe', 'john.doe@example.com', 1234567890, '123 Main St', 'City A', 'State X', 12345, '2023-08-30')

select * from USER_TABLE;

CREATE TABLE BOOK(
BOOK_ID INT IDENTITY(1111,1) PRIMARY KEY,
BOOK_TITLE VARCHAR(255) NOT NULL,
BOOK_AUTHOR VARCHAR(255) NOT NULL,
BOOK_CATEGORY VARCHAR(255) NOT NULL,
BOOK_PUBLISH_YEAR DATETIME NOT NULL,
BOOK_ISBN BIGINT NOT NULL,
BOOK_PRICE MONEY NOT NULL,
BOOK_PUBLISHER VARCHAR(255) NOT NULL,
BOOK_LANGUAGE VARCHAR(255) NOT NULL,
BOOK_PAGECOUNT INT NOT NULL,
BOOK_SHORT_DESC VARCHAR(255) NOT NULL,
BOOK_LONG_DESC VARCHAR(1000) NOT NULL,
BOOK_LONG_THUMBNAIL_URL VARCHAR(1000) NOT NULL,
BOOK_PUBLISH_STATUS VARCHAR(55) NOT NULL
);



INSERT INTO BOOK 
VALUES (
'Unlocking Android',
'W. Frank Ableson',
'Open Source',
'2009-04-01 00:00:00',
1933988673,
299,
'RACHNA SAGAR',
'ENGLISH',
586,
'Unlocking Android: A Developers Guide provides concise, hands-on instruction for the Android operating system and development tools. This book teaches important architectural concepts',
'Android is an open source mobile phone platform based on the Linux operating system and developed by the Open Handset Alliance, a consortium of over 30 hardware, software and telecom companies that focus on open ',
'https://s3.amazonaws.com/AKIAJC5RLADLUMVRPFDQ.book-thumb-images/ableson.jpg',
'PUBLISH'
);

select * from book;

select * from USER_TABLE;


create table CART (
CART_ID int identity(1,1) primary key,
BOOK_ID int FOREIGN KEY REFERENCES BOOK(BOOK_ID) ,
USERS_ID int FOREIGN KEY REFERENCES USER_TABLE(USERS_ID) ,
QUANTITY INT,
);

INSERT INTO CART VALUES (1111,5555,1);

select * from book;
select * from USER_TABLE;
SELECT * FROM CART;



SELECT BOOK.BOOK_PRICE,USER_TABLE.USER_FULLNAME,CART.QUANTITY FROM CART
INNER JOIN USER_TABLE 
ON USER_TABLE.USERS_ID = CART.USERS_ID
INNER JOIN BOOK  ON BOOK.BOOK_ID = CART.BOOK_ID;



SELECT BOOK.BOOK_PRICE FROM CART
INNER JOIN USER_TABLE 
ON USER_TABLE.USERS_ID = CART.USERS_ID
INNER JOIN BOOK  ON BOOK.BOOK_ID = CART.BOOK_ID  WHERE CART.CART_ID = 3;

SELECT CART.QUANTITY FROM CART
INNER JOIN USER_TABLE 
ON USER_TABLE.USERS_ID = CART.USERS_ID
INNER JOIN BOOK  ON BOOK.BOOK_ID = CART.BOOK_ID WHERE CART.CART_ID = 4;



SELECT CART.*,USER_TABLE.USER_FULLNAME FROM CART
JOIN USER_TABLE ON CART.USERS_ID = USER_TABLE.USERS_ID;








-- GET PRICE
CREATE FUNCTION TOTAL_PRICE(@CART_ID INT) RETURNS MONEY
AS BEGIN 
DECLARE @PRICE MONEY
SELECT @PRICE =  BOOK.BOOK_PRICE FROM CART
INNER JOIN USER_TABLE 
ON USER_TABLE.USERS_ID = CART.USERS_ID
INNER JOIN BOOK  ON BOOK.BOOK_ID = CART.BOOK_ID WHERE CART.CART_ID = @CART_ID

DECLARE @QUANTITY INT
SELECT @QUANTITY = 
 CART.QUANTITY FROM CART
INNER JOIN USER_TABLE 
ON USER_TABLE.USERS_ID = CART.USERS_ID
INNER JOIN BOOK  ON BOOK.BOOK_ID = CART.BOOK_ID WHERE CART.CART_ID = @CART_ID

RETURN @QUANTITY*@PRICE
END



SELECT DBO.TOTAL_PRICE(3) AS TOTAL_PRICE;




CREATE TABLE ORDERS(
ORDERS_ID INT IDENTITY(11,1) PRIMARY KEY,
CART_ID INT,
TOTAL_AMOUNT MONEY,
FOREIGN KEY (CART_ID) REFERENCES CART(CART_ID)
);






CREATE PROCEDURE PLACE_ORDER (@CART_ID INT) 
DECLARE @TOTAL_AMOUNT MONEY
BEGIN
SET @TOTAL_AMOUNT = SELECT DBO.TOTAL_PRICE(@CART_ID)
INSERT INTO ORDERS VALUES (@CART_ID,@TOTAL_AMOUNT)
END


-- Create procedure to place an order

CREATE PROCEDURE PLACE_ORDER (@CART_ID INT)
AS
BEGIN
    DECLARE @TOTAL_AMOUNT MONEY;
    SELECT @TOTAL_AMOUNT = DBO.TOTAL_PRICE(@CART_ID);
    INSERT INTO ORDERS (CART_ID, TOTAL_AMOUNT)
    VALUES (@CART_ID, @TOTAL_AMOUNT);
END;

select * from book;
select * from USER_TABLE;
SELECT * FROM CART;

EXEC PLACE_ORDER 4 ;


select * from book;
select * from USER_TABLE;
SELECT * FROM CART;
SELECT * FROM ORDERS;

-- SEARCH VIEW ORDER HISTORY
SELECT ORDERS.*,CART.*,USER_TABLE.*,BOOK.* FROM ORDERS
JOIN CART ON CART.CART_ID = ORDERS.CART_ID
JOIN USER_TABLE
ON USER_TABLE.USERS_ID = CART.USERS_ID
JOIN BOOK ON BOOK.BOOK_ID = CART.BOOK_ID



CREATE TABLE PAYMENT(
TXN INT IDENTITY(55,1) PRIMARY KEY,
ORDER_ID INT FOREIGN KEY REFERENCES ORDERS(ORDERS_ID)
);


INSERT INTO PAYMENT VALUES (11);

SELECT * FROM PAYMENT;

-- JOIN 
SELECT PAYMENT.*,ORDERS.*,CART.*,USER_TABLE.*,BOOK.* FROM PAYMENT
JOIN ORDERS ON PAYMENT.ORDER_ID = ORDERS.ORDERS_ID
JOIN CART ON CART.CART_ID = ORDERS.CART_ID
JOIN USER_TABLE
ON USER_TABLE.USERS_ID = CART.USERS_ID
JOIN BOOK ON BOOK.BOOK_ID = CART.BOOK_ID


-- reports TABLE
SELECT ORDERS.*,BOOK.*,CART.* FROM ORDERS
JOIN CART ON ORDERS.CART_ID = CART.CART_ID
JOIN BOOK ON BOOK.BOOK_ID = CART.BOOK_ID WHERE BOOK.BOOK_ID = 1111;


--[10:56 AM] Aman Gupta
SELECT COUNT(*) AS TotalCount
FROM ORDERS
JOIN CART ON ORDERS.CART_ID = CART.CART_ID
JOIN BOOK ON BOOK.BOOK_ID = CART.BOOK_ID
WHERE BOOK.BOOK_ID = 1111;




