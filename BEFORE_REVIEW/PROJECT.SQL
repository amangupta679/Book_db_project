CREATE DATABASE PR1
USE PR1


DROP TABLE PAYMENT;

DROP TABLE ORDERS,INVENTORY
DROP TABLE CART;
DROP TABLE USER_TABLE,BOOK;

DROP PROCEDURE INSERT_USER,PLACE_ORDER;

DROP PROCEDURE VIEW_ORDER_OF_A_USER
DROP PROCEDURE MAKE_PAYMENT
DROP PROCEDURE search_books
DROP PROCEDURE INSERT_INVENTORY

DROP FUNCTION TOTAL_PRICE


---------------------------------------------------------------------------------
CREATE TABLE USER_TABLE(
USERS_ID INT IDENTITY(5555,1) PRIMARY KEY  , 
USER_PASSWORD VARCHAR(255) ,
USER_FULLNAME VARCHAR(255) ,
USER_EMAIL VARCHAR(255) , 
USER_PHONE BIGINT , 
USER_ADDRESS VARCHAR(255) , 
USER_CITY VARCHAR(255),
USER_STATE VARCHAR(255),
USER_POSTAL_CODE BIGINT ,
USER_REGISTRATION_DATE DATE
);


INSERT INTO USER_TABLE(USER_FULLNAME,USER_PASSWORD,USER_EMAIL,USER_PHONE,USER_ADDRESS,USER_CITY,USER_STATE,USER_POSTAL_CODE,USER_REGISTRATION_DATE)
VALUES('John Doe','JOHN123', 'john.doe@example.com', 1234567890, '123 Main St', 'City A', 'State X', 12345, '2023-08-30');

  SELECT * FROM USER_TABLE

  -- ADD CUSTOMER PROCEDURE
  -- Create the procedure to insert data into USER_TABLE

  

CREATE PROCEDURE INSERT_USER(
    @USER_PASSWORD VARCHAR(255),
    @USER_FULLNAME VARCHAR(255),
    @USER_EMAIL VARCHAR(255),
    @USER_PHONE BIGINT,
    @USER_ADDRESS VARCHAR(255),
    @USER_CITY VARCHAR(255),
    @USER_STATE VARCHAR(255),
    @USER_POSTAL_CODE BIGINT,
    @USER_REGISTRATION_DATE DATE
)
AS BEGIN
    INSERT INTO USER_TABLE (USER_PASSWORD, USER_FULLNAME, USER_EMAIL, USER_PHONE, USER_ADDRESS, USER_CITY, USER_STATE, USER_POSTAL_CODE, USER_REGISTRATION_DATE)
    VALUES (@USER_PASSWORD, @USER_FULLNAME, @USER_EMAIL, @USER_PHONE, @USER_ADDRESS, @USER_CITY, @USER_STATE, @USER_POSTAL_CODE, @USER_REGISTRATION_DATE);
END;

-- Insert a user using the INSERT_USER stored procedure

DECLARE
    @USER_PASSWORD VARCHAR(255) = 'password123',
    @USER_FULLNAME VARCHAR(255) = 'John Doe',
    @USER_EMAIL VARCHAR(255) = 'john@example.com',
    @USER_PHONE BIGINT = 1234567890,
    @USER_ADDRESS VARCHAR(255) = '123 Main St',
    @USER_CITY VARCHAR(255) = 'Cityville',
    @USER_STATE VARCHAR(255) = 'State',
    @USER_POSTAL_CODE BIGINT = 12345,
    @USER_REGISTRATION_DATE DATE = '2023-08-31';

EXEC INSERT_USER
    @USER_PASSWORD,
    @USER_FULLNAME,
    @USER_EMAIL,
    @USER_PHONE,
    @USER_ADDRESS,
    @USER_CITY,
    @USER_STATE,
    @USER_POSTAL_CODE,
    @USER_REGISTRATION_DATE;

	SELECT * FROM USER_TABLE;

  
CREATE TABLE BOOK(
BOOK_ID INT IDENTITY(1111,1) PRIMARY KEY,
BOOK_TITLE VARCHAR(255) NOT NULL,
BOOK_AUTHOR VARCHAR(255) NOT NULL,
BOOK_CATEGORY VARCHAR(255) NOT NULL,
BOOK_PUBLISH_YEAR DATETIME NOT NULL,
BOOK_ISBN BIGINT NOT NULL,
BOOK_PRICE MONEY NOT NULL,
BOOK_PUBLISHER VARCHAR(255) NOT NULL,
BOOK_LANGUAGE VARCHAR(255) NOT NULL,
BOOK_PAGECOUNT INT NOT NULL,
BOOK_SHORT_DESC VARCHAR(255) NOT NULL,
BOOK_PUBLISH_STATUS VARCHAR(55) NOT NULL , 
BOOK_QUANTITY_AVAILABLE INT 
);

-- Inserting data into the 'BOOK' table

INSERT INTO BOOK (BOOK_TITLE, BOOK_AUTHOR, BOOK_CATEGORY, BOOK_PUBLISH_YEAR, BOOK_ISBN, BOOK_PRICE, BOOK_PUBLISHER, BOOK_LANGUAGE, BOOK_PAGECOUNT, BOOK_SHORT_DESC, BOOK_PUBLISH_STATUS, BOOK_QUANTITY_AVAILABLE)
VALUES
    ('Sample Title 1', 'Author 1', 'Fiction', '2000-01-01', 1234567890123, 19.99, 'Publisher A', 'English', 300, 'Sample Description 1', 'Published', 100),
    ('Sample Title 2', 'Author 2', 'Non-Fiction', '2010-05-15', 2345678901234, 24.99, 'Publisher B', 'Spanish', 250, 'Sample Description 2', 'Published', 75),
    ('Sample Title 3', 'Author 3', 'Mystery', '2015-11-30', 3456789012345, 29.99, 'Publisher A', 'English', 400, 'Sample Description 3', 'Published', 50),
    ('Sample Title 10', 'Author 10', 'Science Fiction', '2022-03-25', 1010101010101, 14.99, 'Publisher C', 'French', 200, 'Sample Description 10', 'Published', 120),
    ('New Title 11', 'Author X', 'Fantasy', '2018-08-20', 1111111111111, 17.99, 'Publisher D', 'English', 320, 'New Description 11', 'Published', 90),
    ('Another Title', 'Author Y', 'Drama', '2005-07-10', 2222222222222, 21.99, 'Publisher E', 'German', 280, 'Another Description', 'Published', 60),
    ('Adventure Awaits', 'Author Z', 'Adventure', '2012-12-05', 3333333333333, 28.99, 'Publisher F', 'English', 360, 'Exciting Adventure Book', 'Published', 45),
    ('Title of Mystery', 'Author M', 'Mystery', '2021-06-15', 4444444444444, 23.99, 'Publisher G', 'English', 290, 'Intriguing Mystery Story', 'Published', 70),
    ('Historical Chronicles', 'Author H', 'Historical Fiction', '2019-04-22', 5555555555555, 19.99, 'Publisher H', 'English', 340, 'A Journey Through History', 'Published', 80),
    ('Sci-Fi Odyssey', 'Author S', 'Science Fiction', '2023-01-10', 6666666666666, 25.99, 'Publisher I', 'English', 420, 'Exploring the Universe', 'Published', 110),
    ('Romantic Escapade', 'Author R', 'Romance', '2008-09-14', 7777777777777, 16.99, 'Publisher J', 'English', 270, 'Love and Heartfelt Moments', 'Published', 55),
    ('Thrills and Chills', 'Author T', 'Thriller', '2016-07-05', 8888888888888, 22.99, 'Publisher K', 'English', 310, 'Suspenseful Thriller Experience', 'Published', 65);

	SELECT * FROM BOOK;


create table CART (
CART_ID int identity(1,1) primary key,
BOOK_ID int FOREIGN KEY REFERENCES BOOK(BOOK_ID) ,
USERS_ID int FOREIGN KEY REFERENCES USER_TABLE(USERS_ID) ,
QUANTITY INT,
);


INSERT INTO CART VALUES (1112,5556,2);
INSERT INTO CART VALUES (1118,5556,1);

SELECT * FROM CART;


-- GET TOTAL PRICE FUNCTION
CREATE FUNCTION TOTAL_PRICE(@CART_ID INT) RETURNS MONEY
AS BEGIN 
DECLARE @PRICE MONEY
SELECT @PRICE = BOOK.BOOK_PRICE FROM CART
INNER JOIN USER_TABLE 
ON USER_TABLE.USERS_ID = CART.USERS_ID
INNER JOIN BOOK  ON BOOK.BOOK_ID = CART.BOOK_ID WHERE CART.CART_ID = @CART_ID

DECLARE @QUANTITY INT
SELECT @QUANTITY = 
 CART.QUANTITY FROM CART
INNER JOIN USER_TABLE 
ON USER_TABLE.USERS_ID = CART.USERS_ID
INNER JOIN BOOK  ON BOOK.BOOK_ID = CART.BOOK_ID WHERE CART.CART_ID = @CART_ID

RETURN @QUANTITY*@PRICE
END


-- GETTING THE PRICE
SELECT DBO.TOTAL_PRICE(1) AS TOTAL_PRICE;


CREATE TABLE ORDERS(
ORDERS_ID INT IDENTITY(5555,1) PRIMARY KEY,
CART_ID INT FOREIGN KEY REFERENCES CART(CART_ID),
ORDERS_DATE DATE, 
TOTAL_AMOUNT MONEY,
DISCOUNT_AMOUNT MONEY,
TAX_AMOUNT MONEY,
ORDERS_SHIPPING_ADDRESS VARCHAR(255), 
ORDERS_PAYMENT_STATUS VARCHAR(255) DEFAULT 'PAID',
ORDERS_SHIPPING_STATUS VARCHAR(255) DEFAULT 'SHIPPED',
ORDERS_PAYMENT_METHOD VARCHAR(255) DEFAULT 'UPI'
);

SELECT * FROM ORDERS;

CREATE PROCEDURE PLACE_ORDER (@CART_ID INT)
AS BEGIN
    DECLARE @TOTAL_AMOUNT MONEY;
	DECLARE @DISCOUNT_AMOUNT MONEY;
	DECLARE @TAX_AMOUNT MONEY;
	SET @DISCOUNT_AMOUNT = 0.10* DBO.TOTAL_PRICE(@CART_ID);
	SET @TAX_AMOUNT = 0.20* DBO.TOTAL_PRICE(@CART_ID);
	SET @TOTAL_AMOUNT = @DISCOUNT_AMOUNT + @TAX_AMOUNT +  DBO.TOTAL_PRICE(@CART_ID);
    INSERT INTO ORDERS (CART_ID, ORDERS_DATE, TOTAL_AMOUNT, DISCOUNT_AMOUNT, TAX_AMOUNT)
    VALUES (@CART_ID, GETDATE(), @TOTAL_AMOUNT, @DISCOUNT_AMOUNT, @TAX_AMOUNT);
END;


SELECT * FROM CART;
-- TO PLACE ORDER
EXEC PLACE_ORDER 1;


SELECT * FROM BOOK;
SELECT * FROM CART;
SELECT * FROM ORDERS;


-- VIEW_ORDER_OF_A_USER PROCEDURE
CREATE PROCEDURE VIEW_ORDER_OF_A_USER (@USERS_ID INT)
AS BEGIN 
SELECT ORDERS.ORDERS_ID,ORDERS.ORDERS_DATE,ORDERS.TOTAL_AMOUNT,CART.QUANTITY,USER_TABLE.USER_FULLNAME,USER_TABLE.USERS_ID,BOOK.BOOK_TITLE FROM ORDERS
JOIN CART ON CART.CART_ID = ORDERS.CART_ID
JOIN USER_TABLE
ON USER_TABLE.USERS_ID = CART.USERS_ID
JOIN BOOK ON BOOK.BOOK_ID = CART.BOOK_ID WHERE CART.USERS_ID = @USERS_ID
END

-- VIEW_ORDER_OF_A_USER PROCEDURE
EXEC VIEW_ORDER_OF_A_USER 5556


CREATE TABLE PAYMENT(
TXN INT IDENTITY(55,1) PRIMARY KEY,
ORDER_ID INT FOREIGN KEY REFERENCES ORDERS(ORDERS_ID),
PAYMENT_DATE DATE NOT NULL,
PAYMENT_AMOUNT MONEY NOT NULL , 
UPI_ID VARCHAR(55),
PAYMENT_STATUS VARCHAR(255) DEFAULT 'PAID'
);

-- MAKE PAYMENT PROCEDURE

-- Create the MAKE_PAYMENT procedure

CREATE PROCEDURE MAKE_PAYMENT(@ORDER_ID INT, @PAYMENT_AMOUNT MONEY, @UPI_ID VARCHAR(55))
AS BEGIN
    INSERT INTO PAYMENT (ORDER_ID, PAYMENT_DATE, PAYMENT_AMOUNT, UPI_ID, PAYMENT_STATUS)
    VALUES (@ORDER_ID, GETDATE(), @PAYMENT_AMOUNT, @UPI_ID, 'PAID');
END;

-- Create the MAKE_PAYMENT procedure
EXEC MAKE_PAYMENT 5557, 19.99, '12345@UPI';


SELECT * FROM PAYMENT;



-- CREATE PROCEDURE FOR SEARCH BY TITLE
CREATE PROCEDURE search_books(@search_text VARCHAR(255))
AS BEGIN
    SELECT * FROM BOOK
    WHERE BOOK.BOOK_TITLE LIKE CONCAT('%', @search_text, '%')
       OR BOOK.BOOK_AUTHOR LIKE CONCAT('%', @search_text, '%')
       OR BOOK.BOOK_CATEGORY LIKE CONCAT('%', @search_text, '%');
END;

-- CREATE PROCEDURE FOR SEARCH BY TITLE
EXEC search_books F;


-- Inventory
CREATE TABLE Inventory (
    INVENTORY_ID INT IDENTITY(1, 1) PRIMARY KEY,
    BOOK_ID INT,
    QUANTITY_AVAILABLE INT NOT NULL,
    MINIMUM_STOCK_LEVEL INT NOT NULL,
    MAXIMUM_STOCK_LEVEL INT NOT NULL,
    LAST_UPDATED DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (BOOK_ID) REFERENCES BOOK(BOOK_ID)
);

-- Create the procedure to insert data into Inventory
CREATE PROCEDURE INSERT_INVENTORY(
    @BOOK_ID INT,
    @QUANTITY_AVAILABLE INT,
    @MINIMUM_STOCK_LEVEL INT,
    @MAXIMUM_STOCK_LEVEL INT
)
AS BEGIN
    INSERT INTO Inventory (BOOK_ID, QUANTITY_AVAILABLE, MINIMUM_STOCK_LEVEL, MAXIMUM_STOCK_LEVEL, LAST_UPDATED)
    VALUES (@BOOK_ID, @QUANTITY_AVAILABLE, @MINIMUM_STOCK_LEVEL, @MAXIMUM_STOCK_LEVEL, GETDATE());
END;

-- Insert inventory using the INSERT_INVENTORY stored procedure

DECLARE
    @BOOK_ID INT = 1111,
    @QUANTITY_AVAILABLE INT = 50,
    @MINIMUM_STOCK_LEVEL INT = 10,
    @MAXIMUM_STOCK_LEVEL INT = 100;
EXEC INSERT_INVENTORY
    @BOOK_ID,
    @QUANTITY_AVAILABLE,
    @MINIMUM_STOCK_LEVEL,
    @MAXIMUM_STOCK_LEVEL;


SELECT * FROM Inventory;
